#+TITLE: My Doom Emacs config
#+AUTHOR: Gediminas
#+LANGUAGE: en
#+PROPERTY: header-args:emacs-lisp :tangle yes :cache yes :results silent :padline no
#+OPTIONS: toc:nil
#+EXPORT_FILE_NAME: README.md

* Data
#+BEGIN_SRC emacs-lisp
;;; config.el --- -*- lexical-binding: t -*-

(setq user-full-name "John Doe"
      user-mail-address "john@doe.com")

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - load! for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+END_SRC

* Theme
#+BEGIN_SRC emacs-lisp
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; gds
(setq doom-font (font-spec :family "hack" :size 12))


;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:

;;gds
;;(setq doom-theme 'doom-one)

;; (setq doom-zenburn-brighter-modeline t)
;; (setq doom-zenburn-brighter-comments nil)
;; (setq doom-zenburn-padded-modeline nil)
;; (setq doom-zenburn-comment-bg nil)
(setq doom-theme 'doom-zenburn)

(setq fancy-splash-image "~/.doom.d/doom.png ")

#+END_SRC

* MacOS
#+BEGIN_SRC emacs-lisp
(setq mac-command-modifier 'control)
#+END_SRC

* GUI
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)
;; (set-face-attribute 'region nil :background "#0048CC") ;DeepSkyBlue4
;; (set-face-attribute 'region nil :foreground nil) ;DeepSkyBlue4

(setq evil-split-window-below t
      evil-vsplit-window-right t)

(setq frame-title-format '(:eval
                           (let ((project-name (projectile-project-name)))
                             (if (string= "-" project-name)
                                 (format "%s" "%b")
                               (format "%s" project-name)))))

(after! solaire-mode
  ;;(set-face-attribute 'solaire-hl-line-face nil :background "#555555") ;active line
  ;;(set-face-attribute 'hl-line nil :background "#000000") ;active line
  (set-face-attribute 'region nil :background "#0048aa") ; selection
  (set-face-attribute 'evil-ex-search nil :foreground "black" :background "#ffff00") ;search, when typing
  (set-face-attribute 'lazy-highlight nil :foreground "black" :background "#aaaa00") ;search, selected
  )
#+END_SRC

* Tree
#+BEGIN_SRC emacs-lisp
(after! treemacs
  (setq
   treemacs-position               'right
   ;; treemacs-no-png-images          nil
   treemacs-is-never-other-window  t
   ;; treemacs-file-follow-delay      0.2
   )
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-git-mode 'extended)
  (treemacs-fringe-indicator-mode t)
  (treemacs-icons-dired-mode t)
  (define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action)
  )
#+END_SRC

* Packages
#+BEGIN_SRC emacs-lisp
(after! winum
  (defun winum-assign-0-to-treemacs ()
    (when (string-match-p (buffer-name) "*Treemacs*") 10))

  (add-to-list 'winum-assign-functions #'winum-assign-0-to-treemacs)
                                        ;(set-face-attribute 'winum-face nil :weight 'bold)

  (setq window-numbering-scope            'local
        ;;         winum-reverse-frame-list          nil
        ;;         winum-auto-assign-0-to-minibuffer t
        ;;         ;winum-assign-func                 'my-winum-assign-func
        winum-auto-setup-mode-line        t
        ;;         ;winum-format                      " %s "
        winum-mode-line-position          1
        ;;         winum-ignored-buffers             '(" *which-key*")
        ;;         winum-ignored-buffers-regexp      '(" \\*Treemacs-.*")
        )
  (winum-mode t)
  )

(after! company
  (add-to-list 'company-backends 'company-tabnine))

(after! which-key
  ;; Compact which-key
  (push '(("\\(.*\\) 1" . "winum-select-window-1") . ("\\1 1..9" . "window 1..9"))
        which-key-replacement-alist)
  (push '((nil . "winum-select-window-[2-9]") . t) which-key-replacement-alist)
  )

(after! evil-magit
  (setq magit-log-margin    '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))
  (setq magit-status-margin '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))
  )
#+END_SRC

* Lang -> General
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)
(remove-hook 'doom-first-buffer-hook #'smartparens-global-mode) ;; Disable smartparents
#+END_SRC

* Lang -> Org
#+BEGIN_SRC emacs-lisp
;; (setq org-startup-folded 't)
(setq org-directory "~/org/") ;; It must be set before org loads!

(map! (:when (featurep! :lang org)    ; local conditional
  (:map org-mode-map
   :localleader
   (:prefix-map ("e" . "Export/Eval")
     :desc "org-export-dispatch" "e" #'org-export-dispatch
     :desc "eval-region"         "r" #'eval-region)
   )
))
#+END_SRC

* Lang -> JavaScript
#+BEGIN_SRC emacs-lisp
(setq-hook! 'js2-mode-hook comment-line-break-function nil) ;; Do not continue comment on new line
#+END_SRC

* Hacks
#+BEGIN_SRC emacs-lisp
(superword-mode t)
(add-hook 'after-change-major-mode-hook (lambda () (modify-syntax-entry ?_ "w")))
(add-hook 'js2-mode-hook #'(lambda () (modify-syntax-entry ?_ "w")))
;; (add-hook 'python-mode-hook #'(lambda () (modify-syntax-entry ?_ "w")))
;; (add-hook 'ruby-mode-hook #'(lambda () (modify-syntax-entry ?_ "w")))
#+END_SRC

* Keys (Global)
#+BEGIN_SRC emacs-lisp
(map! :nvi
      "C-<tab>"    #'evil-switch-to-windows-last-buffer
      "C-s"        #'save-buffer
      )

(map! (:when (featurep! :ui workspaces)
       :nv "gt"   #'+workspace/other
       )
      )
#+END_SRC

* Keys (Leader)
#+BEGIN_SRC emacs-lisp
(map! :leader
      "l"  #'ace-window
      "tt" #'toggle-truncate-lines

      (:when (featurep! :ui window-select)
       (:prefix-map ("j" . "Jump")
        :desc "ace-window"  "j" #'ace-window
        )
       )

      (:when (featurep! :ui window-select)
       :n "1" #'winum-select-window-1
       :n "2" #'winum-select-window-2
       :n "3" #'winum-select-window-3
       :n "4" #'winum-select-window-4
       :n "5" #'winum-select-window-5
       :n "6" #'winum-select-window-6
       :n "7" #'winum-select-window-7
       :n "8" #'winum-select-window-8
       :n "9" #'winum-select-window-9
       )
      )
#+END_SRC


* TEST Disabled
#+BEGIN_SRC emacs-lisp
;(map! :leader
;      (:when (featurep! :completion ivy)
;        :desc "M-x"                     :n "SPC" #'counsel-M-x))
;(map! :leader
;      (:when (featurep! :completion helm)
;        :desc "M-x"                     :n "SPC" #'helm-M-x))

;;(setq irony-additional-clang-options '("-std=c++17"))
;;(require 'rtags) ;; optional, must have rtags installed
;;(require 'cmake-ide)
;;(cmake-ide-setup)
;;(require 'indium)
;;(add-hook 'js-mode-hook #'indium-interaction-mode)
;; (setq gds/theme (car custom-enabled-themes))

;https://lccambiaghi.github.io/.doom.d/readme.html

;(ace-window-display-mode t)
;; (set-cursor-color "red")
;; (set-face-attribute 'mode-line nil :background "red")
;; (set-face-attribute 'mode-line-inactive nil :background "dim gray")
;;
;;
;; (defun highlight-selected-window ()
;;   "Highlight selected window with a different background color."
;;   (walk-windows (lambda (w)
;;                   (unless (eq w (selected-window))
;;                     (with-current-buffer (window-buffer w)
;;                       (buffer-face-set '(:background "#111"))))))
;;   (buffer-face-set 'default))

;; (add-hook 'buffer-list-update-hook 'highlight-selected-window)
#+END_SRC

* TEST 3
#+BEGIN_SRC emacs-lisp

;; (c-add-style "doom" ((c-offsets-alist (case-label . 0))))
;; (c-add-style "doom" (case-label . 0))
;; (c-set-offset 'case-label '0)
#+END_SRC

* TEST 2
#+BEGIN_SRC emacs-lisp
#+END_SRC
